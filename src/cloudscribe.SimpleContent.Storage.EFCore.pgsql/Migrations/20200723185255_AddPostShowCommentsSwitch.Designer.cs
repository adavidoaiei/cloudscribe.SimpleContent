// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cloudscribe.SimpleContent.Storage.EFCore.pgsql;

namespace cloudscribe.SimpleContent.Storage.EFCore.pgsql.Migrations
{
    [DbContext(typeof(SimpleContentDbContext))]
    [Migration("20200723185255_AddPostShowCommentsSwitch")]
    partial class AddPostShowCommentsSwitch
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("cloudscribe.SimpleContent.Models.ContentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasMaxLength(36);

                    b.Property<string>("ArchivedBy")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("ArchivedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CategoriesCsv")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ContentSource")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("html");

                    b.Property<string>("CorrelationKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DraftAuthor")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DraftContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DraftPubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DraftSerializedModel")
                        .HasColumnType("text");

                    b.Property<bool>("IsDraftHx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaHtml")
                        .HasColumnType("text");

                    b.Property<string>("MetaJson")
                        .HasColumnType("text");

                    b.Property<int>("PageOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ParentSlug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerializedModel")
                        .HasColumnType("text");

                    b.Property<string>("Serializer")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Slug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TeaserOverride")
                        .HasColumnType("text");

                    b.Property<string>("TemplateKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ViewRoles")
                        .HasColumnType("text");

                    b.Property<bool>("WasDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentSource");

                    b.HasIndex("CorrelationKey");

                    b.HasIndex("CreatedByUser");

                    b.HasIndex("LastModifiedByUser");

                    b.HasIndex("Title");

                    b.ToTable("cs_ContentHistory");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Models.ProjectSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AboutContent")
                        .HasColumnType("text");

                    b.Property<string>("AboutHeading")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("AddBlogToPagesTree")
                        .HasColumnType("boolean");

                    b.Property<bool>("BlogMenuLinksToNewestPost")
                        .HasColumnType("boolean");

                    b.Property<string>("BlogPageNavComponentVisibility")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("BlogPagePosition")
                        .HasColumnType("integer");

                    b.Property<string>("BlogPageText")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CdnUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ChannelCategoriesCsv")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ChannelRating")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ChannelTimeToLive")
                        .HasColumnType("integer");

                    b.Property<string>("CommentNotificationEmail")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CopyrightNotice")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("DaysToComment")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultContentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("html");

                    b.Property<int>("DefaultFeedItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(20);

                    b.Property<string>("DefaultPageSlug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisqusShortName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FacebookAppId")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IncludePubDateInPostUrls")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LocalMediaVirtualPath")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ManagingEditorEmail")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("MaxFeedItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<bool>("ModerateComments")
                        .HasColumnType("boolean");

                    b.Property<int>("PostsPerPage")
                        .HasColumnType("integer");

                    b.Property<string>("PubDateFormat")
                        .HasColumnType("character varying(75)")
                        .HasMaxLength(75);

                    b.Property<string>("Publisher")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublisherEntityType")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PublisherLogoHeight")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PublisherLogoUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublisherLogoWidth")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RecaptchaPrivateKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RecaptchaPublicKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RemoteFeedProcessorUseAgentFragment")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RemoteFeedUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("ShowAboutBox")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowFeaturedPostsOnDefaultPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRecentPostsOnDefaultPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRelatedPosts")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("boolean");

                    b.Property<string>("SiteName")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("TeaserMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("TeaserTruncationLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(20);

                    b.Property<byte>("TeaserTruncationMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TwitterCreator")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TwitterPublisher")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("UseDefaultPageAsRootNode")
                        .HasColumnType("boolean");

                    b.Property<string>("WebmasterEmail")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("cs_ContentProject");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageCategory", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PageEntityId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Value", "PageEntityId");

                    b.HasIndex("PageEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Value");

                    b.ToTable("cs_PageCategory");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Ip")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("PageEntityId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Website")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PageEntityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("cs_PageComment");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CategoriesCsv")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("html");

                    b.Property<string>("CorrelationKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableEditor")
                        .HasColumnType("boolean");

                    b.Property<string>("DraftAuthor")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DraftContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DraftPubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DraftSerializedModel")
                        .HasColumnType("text");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MenuFilters")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("MenuOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MetaHtml")
                        .HasColumnType("text");

                    b.Property<string>("MetaJson")
                        .HasColumnType("text");

                    b.Property<int>("PageOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ParentSlug")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerializedModel")
                        .HasColumnType("text");

                    b.Property<string>("Serializer")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("ShowCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowComments")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowHeading")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowLastModified")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPubDate")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TemplateKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ViewRoles")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationKey");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("cs_Page");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageResourceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PageEntityId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PageEntityId");

                    b.ToTable("cs_PageResource");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PostCategory", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostEntityId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Value", "PostEntityId");

                    b.HasIndex("PostEntityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Value");

                    b.ToTable("cs_PostCategory");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PostComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Ip")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("PostEntityId")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAgent")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Website")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PostEntityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("cs_PostComment");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PostEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<string>("Author")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AutoTeaser")
                        .HasColumnType("text");

                    b.Property<string>("BlogId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CategoriesCsv")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("html");

                    b.Property<string>("CorrelationKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DraftAuthor")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DraftContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DraftPubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DraftSerializedModel")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedByUser")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MetaDescription")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MetaHtml")
                        .HasColumnType("text");

                    b.Property<string>("MetaJson")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SerializedModel")
                        .HasColumnType("text");

                    b.Property<string>("Serializer")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("ShowComments")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("SuppressTeaser")
                        .HasColumnType("boolean");

                    b.Property<string>("TeaserOverride")
                        .HasColumnType("text");

                    b.Property<string>("TemplateKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CorrelationKey");

                    b.HasIndex("Slug");

                    b.ToTable("cs_Post");
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageComment", b =>
                {
                    b.HasOne("cloudscribe.SimpleContent.Storage.EFCore.Models.PageEntity", null)
                        .WithMany("PageComments")
                        .HasForeignKey("PageEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PageResourceEntity", b =>
                {
                    b.HasOne("cloudscribe.SimpleContent.Storage.EFCore.Models.PageEntity", null)
                        .WithMany("PageResources")
                        .HasForeignKey("PageEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("cloudscribe.SimpleContent.Storage.EFCore.Models.PostComment", b =>
                {
                    b.HasOne("cloudscribe.SimpleContent.Storage.EFCore.Models.PostEntity", null)
                        .WithMany("PostComments")
                        .HasForeignKey("PostEntityId");
                });
#pragma warning restore 612, 618
        }
    }
}
